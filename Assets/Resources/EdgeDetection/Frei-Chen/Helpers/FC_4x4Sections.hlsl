/*
┌─────┬─────┬─────┬─────┬─────┬─────┬─────┬─────┬─────┐
│ 0.5 │  0  │  0  │  0  │  0  │  0  │  0  │  0  │ -.5 │
├─────┼─────┼─────┼─────┼─────┼─────┼─────┼─────┼─────┤
│  0  │ 0.5 │  0  │  0  │  0  │  0  │  0  │ -.5 │  0  │
├─────┼─────┼─────┼─────┼─────┼─────┼─────┼─────┼─────┤
│  0  │  0  │ 0.5 │  0  │  0  │  0  │ -.5 │  0  │  0  │
├─────┼─────┼─────┼─────┼─────┼─────┼─────┼─────┼─────┤
│  0  │  0  │  0  │ 0.5 │  0  │ -.5 │  0  │  0  │  0  │
├─────┼─────┼─────┼─────┼─────┼─────┼─────┼─────┼─────┤
│  0  │  0  │  0  │  0  │  0  │  0  │  0  │  0  │  0  │
├─────┼─────┼─────┼─────┼─────┼─────┼─────┼─────┼─────┤
│  0  │  0  │  0  │ -.5 │  0  │ 0.5 │  0  │  0  │  0  │
├─────┼─────┼─────┼─────┼─────┼─────┼─────┼─────┼─────┤
│  0  │  0  │ -.5 │  0  │  0  │  0  │ 0.5 │  0  │  0  │
├─────┼─────┼─────┼─────┼─────┼─────┼─────┼─────┼─────┤
│  0  │ -.5 │  0  │  0  │  0  │  0  │  0  │ 0.5 │  0  │
├─────┼─────┼─────┼─────┼─────┼─────┼─────┼─────┼─────┤
│ -.5 │  0  │  0  │  0  │  0  │  0  │  0  │  0  │ 0.5 │
└─────┴─────┴─────┴─────┴─────┴─────┴─────┴─────┴─────┘
*/
// Projection matrix onto the Edge subspace
float P_B[81] =
{
    0.5, 0.0, 0.0, 0.0,  0, 0.0, 0.0, 0.0, -.5,
    0.0, 0.5, 0.0, 0.0,  0, 0.0, 0.0, -.5, 0.0,
    0.0, 0.0, 0.5, 0.0,  0, 0.0, -.5, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.5,  0, -.5, 0.0, 0.0, 0.0,
      0,   0,   0,   0,  0,   0,   0,   0,   0,
    0.0, 0.0, 0.0, -.5,  0, 0.5, 0.0, 0.0, 0.0,
    0.0, 0.0, -.5, 0.0,  0, 0.0, 0.5, 0.0, 0.0,
    0.0, -.5, 0.0, 0.0,  0, 0.0, 0.0, 0.5, 0.0,
    -.5, 0.0, 0.0, 0.0,  0, 0.0, 0.0, 0.0, 0.5
};

// Split 9x9 into four 4x4 matrices and 1 "cross-hair" matrix

float4x4 P_B_NW =
{
    0.5, 0.0, 0.0, 0.0,
    0.0, 0.5, 0.0, 0.0,
    0.0, 0.0, 0.5, 0.0,
    0.0, 0.0, 0.0, 0.5
};

float4x4 P_B_NE =
{
    0.0, 0.0, 0.0, -.5,
    0.0, 0.0, -.5, 0.0,
    0.0, -.5, 0.0, 0.0,
    -.5, 0.0, 0.0, 0.0
};

float4x4 P_B_SW =
{
    0.0, 0.0, 0.0, -.5,
    0.0, 0.0, -.5, 0.0,
    0.0, -.5, 0.0, 0.0,
    -.5, 0.0, 0.0, 0.0
};

float4x4 P_B_SE =
{
    0.5, 0.0, 0.0, 0.0,
    0.0, 0.5, 0.0, 0.0,
    0.0, 0.0, 0.5, 0.0,
    0.0, 0.0, 0.0, 0.5
};

// Scrapped row by row idea
float P_B_row_1_9[9] =
{
0.5, 0.0, 0.0, 0.0,  0, 0.0, 0.0, 0.0, -.5,
};
float P_B_row_2_8[9] =
{
0.0, 0.5, 0.0, 0.0,  0, 0.0, 0.0, -.5, 0.0,
};
float P_B_row_3_7[9] =
{
0.0, 0.0, 0.5, 0.0,  0, 0.0, -.5, 0.0, 0.0,
};
float P_B_row_4_6[9] =
{
0.0, 0.0, 0.0, 0.5,  0, -.5, 0.0, 0.0, 0.0,
};

// P_B_row 5 is all 0


/*
┌──────┬──────┬──────┬──────┬──────┬──────┬──────┬──────┬──────┐
│ 7/18 │ -1/9 │ -1/9 │ -1/9 │ -1/9 │ -1/9 │ -1/9 │ -1/9 │ 7/18 │
├──────┼──────┼──────┼──────┼──────┼──────┼──────┼──────┼──────┤
│ -1/9 │ 7/18 │ -1/9 │ -1/9 │ -1/9 │ -1/9 │ -1/9 │ 7/18 │ -1/9 │
├──────┼──────┼──────┼──────┼──────┼──────┼──────┼──────┼──────┤
│ -1/9 │ -1/9 │ 7/18 │ -1/9 │ -1/9 │ -1/9 │ 7/18 │ -1/9 │ -1/9 │
├──────┼──────┼──────┼──────┼──────┼──────┼──────┼──────┼──────┤
│ -1/9 │ -1/9 │ -1/9 │ 7/18 │ -1/9 │ 7/18 │ -1/9 │ -1/9 │ -1/9 │
├──────┼──────┼──────┼──────┼──────┼──────┼──────┼──────┼──────┤
│ -1/9 │ -1/9 │ -1/9 │ -1/9 │ -1/9 │ -1/9 │ -1/9 │ -1/9 │ -1/9 │
├──────┼──────┼──────┼──────┼──────┼──────┼──────┼──────┼──────┤
│ -1/9 │ -1/9 │ -1/9 │ 7/18 │ -1/9 │ 7/18 │ -1/9 │ -1/9 │ -1/9 │
├──────┼──────┼──────┼──────┼──────┼──────┼──────┼──────┼──────┤
│ -1/9 │ -1/9 │ 7/18 │ -1/9 │ -1/9 │ -1/9 │ 7/18 │ -1/9 │ -1/9 │
├──────┼──────┼──────┼──────┼──────┼──────┼──────┼──────┼──────┤
│ -1/9 │ 7/18 │ -1/9 │ -1/9 │ -1/9 │ -1/9 │ -1/9 │ 7/18 │ -1/9 │
├──────┼──────┼──────┼──────┼──────┼──────┼──────┼──────┼──────┤
│ 7/18 │ -1/9 │ -1/9 │ -1/9 │ -1/9 │ -1/9 │ -1/9 │ -1/9 │ 7/18 │
└──────┴──────┴──────┴──────┴──────┴──────┴──────┴──────┴──────┘
*/

// Projection matrix onto the line subspace.
const float P_L[81] =
{
    0.3888, -.1111, -.1111, -.1111, -.1111, -.1111, -.1111, -.1111, 0.3888,
    -.1111, 0.3888, -.1111, -.1111, -.1111, -.1111, -.1111, 0.3888, -.1111,
    -.1111, -.1111, 0.3888, -.1111, -.1111, -.1111, 0.3888, -.1111, -.1111,
    -.1111, -.1111, -.1111, 0.3888, -.1111, 0.3888, -.1111, -.1111, -.1111,
    -.1111, -.1111, -.1111, -.1111, -.1111, -.1111, -.1111, -.1111, -.1111,
    -.1111, -.1111, -.1111, 0.3888, -.1111, 0.3888, -.1111, -.1111, -.1111,
    -.1111, -.1111, 0.3888, -.1111, -.1111, -.1111, 0.3888, -.1111, -.1111,
    -.1111, 0.3888, -.1111, -.1111, -.1111, -.1111, -.1111, 0.3888, -.1111,
    0.3888, -.1111, -.1111, -.1111, -.1111, -.1111, -.1111, -.1111, 0.3888
};

const float4x4 P_L_NW =
{
    0.3888, -.1111, -.1111, -.1111,
    -.1111, 0.3888, -.1111, -.1111,
    -.1111, -.1111, 0.3888, -.1111,
    -.1111, -.1111, -.1111, 0.3888
};

const float4x4 P_L_NE =
{
    -.1111, -.1111, -.1111, 0.3888,
    -.1111, -.1111, 0.3888, -.1111,
    -.1111, 0.3888, -.1111, -.1111,
    0.3888, -.1111, -.1111, -.1111
};

const float4x4 P_L_SW =
{
    -.1111, -.1111, -.1111, 0.3888,
    -.1111, -.1111, 0.3888, -.1111,
    -.1111, 0.3888, -.1111, -.1111,
    0.3888, -.1111, -.1111, -.1111
};

const float4x4 P_L_SE =
{
    0.3888, -.1111, -.1111, -.1111,
    -.1111, 0.3888, -.1111, -.1111,
    -.1111, -.1111, 0.3888, -.1111,
    -.1111, -.1111, -.1111, 0.3888
};

const float P_L_row_1_9[9] =
{
    0.3888, -.1111, -.1111, -.1111, -.1111, -.1111, -.1111, -.1111, 0.3888
};

const float P_L_row_2_8[9] =
{
    -.1111, 0.3888, -.1111, -.1111, -.1111, -.1111, -.1111, 0.3888, -.1111,
};

const float P_L_row_3_7[9] =
{
    -.1111, -.1111, 0.3888, -.1111, -.1111, -.1111, 0.3888, -.1111, -.1111,
};

const float P_L_row_4_6[9] =
{
    -.1111, -.1111, -.1111, 0.3888, -.1111, 0.3888, -.1111, -.1111, -.1111,
};

const float P_L_row_5 = -0.1111;

/*
For the measurement subspace, the projection matrix
will be
*/

/*
┌─────┬─────┬─────┬─────┬─────┬─────┬─────┬─────┬─────┐
│ 1/9 │ 1/9 │ 1/9 │ 1/9 │ 1/9 │ 1/9 │ 1/9 │ 1/9 │ 1/9 │
├─────┼─────┼─────┼─────┼─────┼─────┼─────┼─────┼─────┤
│ 1/9 │ 1/9 │ 1/9 │ 1/9 │ 1/9 │ 1/9 │ 1/9 │ 1/9 │ 1/9 │
├─────┼─────┼─────┼─────┼─────┼─────┼─────┼─────┼─────┤
│ 1/9 │ 1/9 │ 1/9 │ 1/9 │ 1/9 │ 1/9 │ 1/9 │ 1/9 │ 1/9 │
├─────┼─────┼─────┼─────┼─────┼─────┼─────┼─────┼─────┤
│ 1/9 │ 1/9 │ 1/9 │ 1/9 │ 1/9 │ 1/9 │ 1/9 │ 1/9 │ 1/9 │
├─────┼─────┼─────┼─────┼─────┼─────┼─────┼─────┼─────┤
│ 1/9 │ 1/9 │ 1/9 │ 1/9 │ 1/9 │ 1/9 │ 1/9 │ 1/9 │ 1/9 │
├─────┼─────┼─────┼─────┼─────┼─────┼─────┼─────┼─────┤
│ 1/9 │ 1/9 │ 1/9 │ 1/9 │ 1/9 │ 1/9 │ 1/9 │ 1/9 │ 1/9 │
├─────┼─────┼─────┼─────┼─────┼─────┼─────┼─────┼─────┤
│ 1/9 │ 1/9 │ 1/9 │ 1/9 │ 1/9 │ 1/9 │ 1/9 │ 1/9 │ 1/9 │
├─────┼─────┼─────┼─────┼─────┼─────┼─────┼─────┼─────┤
│ 1/9 │ 1/9 │ 1/9 │ 1/9 │ 1/9 │ 1/9 │ 1/9 │ 1/9 │ 1/9 │
├─────┼─────┼─────┼─────┼─────┼─────┼─────┼─────┼─────┤
│ 1/9 │ 1/9 │ 1/9 │ 1/9 │ 1/9 │ 1/9 │ 1/9 │ 1/9 │ 1/9 │
└─────┴─────┴─────┴─────┴─────┴─────┴─────┴─────┴─────┘
*/
/*
float p_m[81]
{
    0.1111, 0.1111, 0.1111, 0.1111, 0.1111, 0.1111, 0.1111, 0.1111, 0.1111,
    0.1111, 0.1111, 0.1111, 0.1111, 0.1111, 0.1111, 0.1111, 0.1111, 0.1111,
    0.1111, 0.1111, 0.1111, 0.1111, 0.1111, 0.1111, 0.1111, 0.1111, 0.1111,
    0.1111, 0.1111, 0.1111, 0.1111, 0.1111, 0.1111, 0.1111, 0.1111, 0.1111,
    0.1111, 0.1111, 0.1111, 0.1111, 0.1111, 0.1111, 0.1111, 0.1111, 0.1111,
    0.1111, 0.1111, 0.1111, 0.1111, 0.1111, 0.1111, 0.1111, 0.1111, 0.1111,
    0.1111, 0.1111, 0.1111, 0.1111, 0.1111, 0.1111, 0.1111, 0.1111, 0.1111,
    0.1111, 0.1111, 0.1111, 0.1111, 0.1111, 0.1111, 0.1111, 0.1111, 0.1111,
    0.1111, 0.1111, 0.1111, 0.1111, 0.1111, 0.1111, 0.1111, 0.1111, 0.1111
};
*/

// Projection matrix onto the measurement subspace.
float4x4 P_M_4x4 =
{
    0.1111, 0.1111, 0.1111, 0.1111,
    0.1111, 0.1111, 0.1111, 0.1111,
    0.1111, 0.1111, 0.1111, 0.1111,
    0.1111, 0.1111, 0.1111, 0.1111
};

/*
The results for the projection matrices onto the edge and
line subspaces can be generalized to any subspace whose
basis vector satisfy the masks conditions for line and edge
detection, i.e., that their components sum up zero and that
they observe a certain symmetry. For the edge detecting
masks the symmetric components are opposed and for the
line detecting masks, they are equal. Consequently, the central
component is null for the former, and it is opposed to the
sum of them all for the latter.
*/

// float4x4 m_l_81[4] =
// {
//     p_l_m00, p_l_m05, p_l_m45, p_l_m50
// };

static const float4x4 proj_NW[3] =
{
    P_B_NW, P_L_NW, P_M_4x4
};

static const float4x4 proj_NE[3] =
{
    P_B_NE, P_L_NE, P_M_4x4
};

static const float4x4 proj_SW[3] =
{
    P_B_SW, P_L_SW, P_M_4x4
};

static const float4x4 proj_SE[3] =
{
    P_B_SE, P_L_SE, P_M_4x4
};